/*
 * Copyright (C) 2020 Cristina Domenech <linkedin.com/in/c-domenech/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cdomenech.text_editor;

import com.cdomenech.font_chooser.FontChooser;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Cristina Domenech <linkedin.com/in/c-domenech/>
 */
public class TextEditor extends javax.swing.JFrame {

    public FontChooser fc;

    /**
     * Creates new form textEditorUI
     */
    public TextEditor() {
        initComponents();
        fc = new FontChooser("Tahoma", Font.PLAIN, 11);
        // Set list of the Family fonts available
        listFont.setListData(fc.getFontList());
        tfSample.setFont(new Font(tfFont.getText(), fc.getSelectedStyle(tfStyle.getText()), Integer.parseInt(tfSize.getText())));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FontChooserUI = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfFont = new javax.swing.JTextField();
        tfStyle = new javax.swing.JTextField();
        tfSize = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFont = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listStyle = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listSize = new javax.swing.JList<>();
        tfSample = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        textArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        filePath = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        submenuFile = new javax.swing.JMenu();
        newSub = new javax.swing.JMenuItem();
        openSub = new javax.swing.JMenuItem();
        saveSub = new javax.swing.JMenuItem();
        saveAsSub = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        exitSub = new javax.swing.JMenuItem();
        submenuFormat = new javax.swing.JMenu();
        fontSub = new javax.swing.JMenuItem();

        FontChooserUI.setTitle("Font");
        FontChooserUI.setFocusable(false);
        FontChooserUI.setMinimumSize(new java.awt.Dimension(380, 460));
        FontChooserUI.setResizable(false);
        FontChooserUI.setSize(new java.awt.Dimension(380, 460));

        jLabel1.setText("Font:");

        jLabel2.setText("Style:");

        jLabel3.setText("Size");

        jLabel4.setText("Sample");

        tfFont.setEditable(false);
        tfFont.setText("Tahoma");

        tfStyle.setEditable(false);
        tfStyle.setText("Plain");

        tfSize.setEditable(false);
        tfSize.setText("11");

        listFont.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFont.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFont.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listFontValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listFont);

        listStyle.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Plain", "Bold", "Italic" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listStyle.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listStyle.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listStyleValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listStyle);

        listSize.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "3", "5", "8", "10", "12", "14", "18", "24", "36", "48" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listSize.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSize.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSizeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listSize);

        tfSample.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSample.setText("The quick brown fox jumps over the lazy dog");

        btnOK.setText("OK");
        btnOK.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FontChooserUILayout = new javax.swing.GroupLayout(FontChooserUI.getContentPane());
        FontChooserUI.getContentPane().setLayout(FontChooserUILayout);
        FontChooserUILayout.setHorizontalGroup(
            FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FontChooserUILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FontChooserUILayout.createSequentialGroup()
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(tfSample, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                        .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FontChooserUILayout.createSequentialGroup()
                                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfFont)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfStyle, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfSize)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel4))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        FontChooserUILayout.setVerticalGroup(
            FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FontChooserUILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSample, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(FontChooserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Txt Editor");
        setMinimumSize(new java.awt.Dimension(510, 480));
        setSize(new java.awt.Dimension(510, 460));

        textArea.setColumns(18);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setToolTipText("");
        textArea.setWrapStyleWord(true);
        textArea.setBorder(null);

        filePath.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        filePath.setText("New file");
        filePath.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filePath, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textArea, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        submenuFile.setText("File");

        newSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newSub.setText("New");
        newSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSubActionPerformed(evt);
            }
        });
        submenuFile.add(newSub);

        openSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openSub.setText("Open...");
        openSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSubActionPerformed(evt);
            }
        });
        submenuFile.add(openSub);

        saveSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveSub.setText("Save");
        saveSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSubActionPerformed(evt);
            }
        });
        submenuFile.add(saveSub);

        saveAsSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsSub.setText("Save as...");
        saveAsSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsSubActionPerformed(evt);
            }
        });
        submenuFile.add(saveAsSub);
        submenuFile.add(separator);

        exitSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitSub.setText("Exit");
        exitSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitSubActionPerformed(evt);
            }
        });
        submenuFile.add(exitSub);

        menuBar.add(submenuFile);

        submenuFormat.setText("Format");

        fontSub.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fontSub.setText("Font...");
        fontSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSubActionPerformed(evt);
            }
        });
        submenuFormat.add(fontSub);

        menuBar.add(submenuFormat);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Open the explorer window, user select a file Its content is read and
     * written in the text area
     *
     * @param evt
     */
    private void openSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSubActionPerformed
        // Set JFileChooser in the user's Desktop to make the experience better
        String userDir = System.getProperty("user.home");
        JFileChooser fc = new JFileChooser(userDir + "/Desktop");
        // The file chooser is going to show only .txt format files
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Documents (*.txt)", "txt", "text");
        fc.setFileFilter(filter);
        fc.setDialogTitle("Open file");
        fc.showOpenDialog(this);
        File file = fc.getSelectedFile();
        if (file != null) {
            BufferedReader reader;
            try {
                reader = new BufferedReader(new FileReader(file.getPath(), StandardCharsets.UTF_8));
                String aux, currentText = "";
                while ((aux = reader.readLine()) != null) {
                    currentText += aux + "\n";
                }
                reader.close();
                textArea.setText(currentText);
                filePath.setText(file.getPath());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openSubActionPerformed
    /**
     * It save the text into the original file If it does not exist, call save
     * as method
     *
     * @param evt
     */
    private void saveSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSubActionPerformed
        File file = new File(filePath.getText());
        if (file.exists()) {
            try {
                textArea.write(new OutputStreamWriter(new FileOutputStream(file), "utf-8"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // If you try to save the file, but it does not exist, this method, call the save as method
            saveAsSub.doClick();
        }
    }//GEN-LAST:event_saveSubActionPerformed
    /**
     * Close the application
     *
     * @param evt
     */
    private void exitSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitSubActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitSubActionPerformed
    /**
     * Clear the text area for a new file
     *
     * @param evt
     */
    private void newSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSubActionPerformed
        textArea.setText("");
        filePath.setText("New file");
    }//GEN-LAST:event_newSubActionPerformed
    /**
     * Open the Save as explorer window and the user go to the path and write
     * the filename. It save the text into the file
     *
     * @param evt
     */
    private void saveAsSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsSubActionPerformed
        // Set JFileChooser in the user's Desktop to make the experience better
        String userDir = System.getProperty("user.home");
        JFileChooser fc = new JFileChooser(userDir + "/Desktop");
        // The file chooser is going to show only .txt format files
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Documents (*.txt)", "txt", "text");
        fc.setFileFilter(filter);
        fc.setDialogTitle("Save as...");
        int userSelection = fc.showSaveDialog(saveAsSub);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file != null) {
                if (!file.getName().toLowerCase().endsWith(".txt")) {
                    file = new File(file.getParentFile(), file.getName() + ".txt");
                    filePath.setText(file.getPath());
                }
                try {
                    textArea.write(new OutputStreamWriter(new FileOutputStream(file), "utf-8"));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveAsSubActionPerformed
    /**
     * Set visible the font chooser window
     *
     * @param evt
     */
    private void fontSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSubActionPerformed
        FontChooserUI.setVisible(true);
    }//GEN-LAST:event_fontSubActionPerformed
    /**
     * When the user select a font it appears in the superior label, and change
     * the Sample
     *
     * @param evt
     */
    private void listFontValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listFontValueChanged
        String selectedFont = listFont.getSelectedValue();
        tfFont.setText(selectedFont);
        tfSample.setFont(new Font(selectedFont, fc.getSelectedStyle(tfStyle.getText()), Integer.parseInt(tfSize.getText())));
    }//GEN-LAST:event_listFontValueChanged
    /**
     * When the user select a style it appears in the superior label, and change
     * the Sample
     *
     * @param evt
     */
    private void listStyleValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listStyleValueChanged
        String selectedStyle = listStyle.getSelectedValue();
        tfStyle.setText(selectedStyle);
        tfSample.setFont(new Font(tfFont.getText(), fc.getSelectedStyle(selectedStyle), Integer.parseInt(tfSize.getText())));
    }//GEN-LAST:event_listStyleValueChanged
    /**
     * When the user select a size it appears in the superior label, and change
     * the Sample
     *
     * @param evt
     */
    private void listSizeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSizeValueChanged
        String selectedSize = listSize.getSelectedValue();
        tfSize.setText(selectedSize);
        tfSample.setFont(new Font(tfFont.getText(), fc.getSelectedStyle(tfStyle.getText()), Integer.parseInt(selectedSize)));
    }//GEN-LAST:event_listSizeValueChanged
    /**
     * OK button set the selected font as the text area font and close the
     * window
     *
     * @param evt
     */
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // Set the font selected by the user
        textArea.setFont(new Font(tfFont.getText(), fc.getSelectedStyle(tfStyle.getText()), Integer.parseInt(tfSize.getText())));
        FontChooserUI.setVisible(false);

    }//GEN-LAST:event_btnOKActionPerformed
    /**
     * Cancel button close the window
     *
     * @param evt
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        FontChooserUI.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame FontChooserUI;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JMenuItem exitSub;
    private javax.swing.JLabel filePath;
    private javax.swing.JMenuItem fontSub;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listFont;
    private javax.swing.JList<String> listSize;
    private javax.swing.JList<String> listStyle;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newSub;
    private javax.swing.JMenuItem openSub;
    private javax.swing.JMenuItem saveAsSub;
    private javax.swing.JMenuItem saveSub;
    private javax.swing.JPopupMenu.Separator separator;
    private javax.swing.JMenu submenuFile;
    private javax.swing.JMenu submenuFormat;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField tfFont;
    private javax.swing.JTextField tfSample;
    private javax.swing.JTextField tfSize;
    private javax.swing.JTextField tfStyle;
    // End of variables declaration//GEN-END:variables
}
